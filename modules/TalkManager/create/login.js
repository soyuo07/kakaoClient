'use strict'; function b(c, d) { var e = a(); return b = function (f, g) { f = f - 0x1e3; var h = e[f]; return h; }, b(c, d); } var C = b; (function (c, d) { var B = b, e = c(); while (!![]) { try { var f = parseInt(B(0x1f3)) / 0x1 + parseInt(B(0x1e4)) / 0x2 + -parseInt(B(0x21b)) / 0x3 + -parseInt(B(0x229)) / 0x4 + parseInt(B(0x21e)) / 0x5 + -parseInt(B(0x219)) / 0x6 * (-parseInt(B(0x223)) / 0x7) + -parseInt(B(0x1f0)) / 0x8; if (f === d) break; else e['push'](e['shift']()); } catch (g) { e['push'](e['shift']()); } } }(a, 0x79486)); const login = require(C(0x1f1)); let status = {}, exists = java['io'][C(0x1f9)](C(0x226))[C(0x215)](); if (!exists) status = login['login'](); let p, noti = {}, pww = ![], chat, channelList = {}; function a() { var F = ['slice', '../shareTalk/src/request', 'xfl', 'get', 'request', 'exists', 'android.largeIcon', 'script', 'android.summaryText', '12DtIVyj', 'getDeclaredField', '55656TNuHFM', 'passcode\x20is\x20wrong!', 'startsWith', '865180bGbnbP', 'getBundle', 'getParcelableArray', 'extras', 'msgbot', '1183903RJMZsf', 'api', 'com', 'sdcard/account.t', 'You\x20are\x20using\x20session\x20mode\x20now', 'getIcon', '3050604EwIrUv', 'hashCode', 'application', 'msg', 'getString', 'android.text', 'android.wearable.EXTENSIONS', '1148396dpERKQ', 'log_id', 'Hey\x20user,\x20already\x20Login\x20Success!', 'client', 'KakaoTalk\x20Login\x20Success', '__javaObject__', 'getRemoteInputs', 'SessionCacheReplier', 'channel', 'KakaoTalk\x20Share\x20Extension/10.0.9', 'stack', 'profileImage', '1451800RmgfZe', './../login', 'Companion', '373960ufDGna', 'getParcelable', 'room', 'isDebugChat', 'status', '../shareTalk', 'File', 'actions', 'reply', 'sender_person', 'getNotification', 'Something\x20went\x20wrong!', 'android.messages', 'length', 'login', 'ImageDB', 'VERSION', 'getPackageName', 'ko-KR', 'getUser', 'NotificationListener', 'SDK_INT', 'legacy', 'replyText', 'android.title', 'chatLogId', 'passcode\x20is\x20wrong', 'setSession', 'chat_id']; a = function () { return F; }; return a(); } module['exports'] = { 'response': function (c, d, e, f, g) { var D = C; const h = Packages[D(0x225)][D(0x212)]['msgbot'][D(0x217)][D(0x224)][D(0x209)][D(0x1eb)][D(0x1e9)][D(0x21a)](D(0x1f6)); h['setAccessible'](!![]); if (!h[D(0x213)](g)) return; if (status[D(0x1f7)] == 0xc) return g[D(0x1fb)](D(0x21c)); if (status[D(0x1f7)] == -0x64 && !p) login[D(0x214)](), g[D(0x1fb)]('send\x20Auth\x20Number,\x20please\x20send\x20me\x20passcode!'), p = !![]; else { if (p && status['status'] == -0x64) { let i = login['passcode'](d); if (i[D(0x1f7)] == -0x6f) return g[D(0x1fb)](D(0x20d)); if (i[D(0x1f7)] == -0x70) return login['request'](), g[D(0x1fb)]('verification\x20was\x20expired,\x20recheck\x20passcode'); status = login[D(0x201)](), p = ![]; } else { if (status['status'] == 0x0 && !p) return p = !![], g['reply'](D(0x1e8)); else { if (status[D(0x1f7)] == 0x0 && p) return g[D(0x1fb)](D(0x1e6)); else { if (status['status'] == -0x1f4) g['reply'](D(0x1fe)); else { if (!exists) g['reply'](D(0x227)); if (exists) g[D(0x1fb)](D(0x1e6)); } } } } } }, 'talkCreate': function (c, d, e) { return function (f) { var E = b; if (!pww) return; var g = f[E(0x204)](); if (!g[E(0x21d)](c)) return; var h = f[E(0x1fd)]()[E(0x1fa)]; if (h == null) return; var i = f[E(0x206)]()[E(0x22a)](), j = f['tag'], k = i != 0x0; if (d != k) return; for (var l = 0x0; l < h[E(0x200)]; l++) { var m = h[l]; if (m[E(0x1ea)]() == null) continue; var o = f[E(0x1fd)]()[E(0x221)], q = o[E(0x213)](E(0x20c)), r, s, t, u, v; if (android['os']['Build'][E(0x203)][E(0x208)] < 0x1e) { r = new com[(E(0x212))][(E(0x222))][(E(0x217))][(E(0x224))][(E(0x209))][(E(0x202))](o['get'](E(0x216)), null), u = o['get']('android.subText'), v = u != null; if (u == null) u = s; t = o[E(0x213)](E(0x22e)), s = o[E(0x213)](E(0x20b)); } else { t = o[E(0x213)]('android.text')['toString'](), s = o[E(0x22d)](E(0x20b)), u = o['getString']('android.subText'); if (u == null) u = o[E(0x22d)](E(0x218)); v = u != null; if (u == null) u = s; var w = o[E(0x220)](E(0x1ff))[0x0]['get'](E(0x1fc))[E(0x228)]()['getBitmap'](), x = o[E(0x21f)](E(0x1e3)); if (x != null) x = x[E(0x1f4)]('background'); r = new com[(E(0x212))]['msgbot'][(E(0x217))][(E(0x224))][(E(0x209))][(E(0x202))](w, x); } var y = new com[(E(0x212))]['msgbot'][(E(0x217))][(E(0x224))][(E(0x209))][(E(0x1eb))](g, m, u, ![], ''); com[E(0x212)][E(0x222)][E(0x22b)]['service'][E(0x207)][E(0x1f2)][E(0x20e)](g, u, m), noti = { 'chat_id': j, 'log_id': q, 'sender': s, 'room': u, 'msg': t, 'profileImage': r, 'replyText': A => y[E(0x1fb)](A) }; let z = { 'id': noti[E(0x1e5)], 'text': noti[E(0x22c)], 'user': { 'name': noti['sender'], 'profile': noti[E(0x1ef)] }, 'channel': { 'id': noti[E(0x20f)], 'name': noti[E(0x1f5)], 'replyText': noti[E(0x20a)] } }; channelList[z['channel']['id']] = z[E(0x1ec)], this[E(0x1e7)] = require(E(0x211))['RequestClient']['create']({ 'baseURL': 'https://talk-shareex.kakao.com', 'headers': { 'User-Agent': E(0x1ed), 'Accept-Language': E(0x205) } }); if (!e) z[E(0x1ec)] = require(E(0x1f8))['create'](z['channel']); try { chat(z, z['channel']); } catch (A) { Log['e'](A + '\x0a\x0a' + A[E(0x1ee)][E(0x210)](0x0, -0x1)); } } }; }, 'fow': function (c) { pww = c; }, 'chat': function (c) { chat = c; }, 'getChannel': c => channelList[c] || {} };